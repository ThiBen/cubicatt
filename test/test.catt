### Some contexts
test (x : *)
test (x : *) (y : *)
test (x : *) (y : *) (f : Path i * x y)
test (x : *) (y : *) (h : Path i * x y) (z : *) (t : *) (k : Path i * z t) (f : Path i * x z) (g : Path i * y t ) (a : Path i (Path j * (h i) (k i)) f g)
test (x : *) (f : Path i * x x)
test (x : *) (f : Path i * x x) (a : Path i (Path j * (f i) (f i)) f f)

# One cube context
test (x : *) (z : *) (k : Path i * x z)
     (x' : *) (z' : *) (k' : Path i * x' z')
     (hx : Path i * x x') (hz : Path i * z z') (a : Path i (Path j * (k i) (k' i)) hx hz)
     (y : *) (t : *) (l : Path i * y t)
     (y' : * ) (t' : *) (l' : Path i * y' t')
     (hy : Path i * y y') (ht : Path i * t t') (b : Path i (Path j * (l i) (l' i)) hy ht)
     (f : Path i * x y) (g : Path i * z t) (c : Path i (Path j * (k i) (l i)) f g)
     (f' : Path i * x' y') (g' : Path i * z' t') (d : Path i  (Path j * (k' i) (l' i)) f' g')
     (e : Path i (Path j * (hx i) (hy i)) f f') (h : Path i  (Path j * (hz i) (ht i)) g g')
     (A : Path i  (Path j  (Path k * ((a i) j) ((b i) j)) (c i) (d i)) e h)


#### Various coherences
coh id (x : *) : Path i * x x
coh comp (x : *) (y : *) (f : Path i * x y) (z : *) (g : Path i * y z) : Path i * x z

coh unit-l (x : *) (y : *) (f : Path i * x y) :
    Path i (Path j * ((id x) i) ((id y) i)) (comp x x (id x) y f) f

coh unit-r (x : *) (y : *) (f : Path i * x y) :
    Path i (Path j * ((id x) i) ((id y) i)) (comp x y f y (id y)) f


coh id2 (x : *) (y : *) (f : Path i * x y) :
    Path i (Path j * ((id x) i) ((id y) i)) f f

coh connexion1 (x : *) (y : *) (f : Path i * x y) :
    Path i (Path j * (f i) ((id y) i)) f (id y)

coh connexion2 (x : *) (y : *) (f : Path i * x y) :
    Path i (Path j * ((id x) i) (f i)) (id x) f

#vertical composition of 2-cells
coh vcomp (x : *) (x' : *) (hx : Path i * x x') (x'' : *) (hx' : Path i * x' x'')
    	  (y : *) (y' : *) (hy : Path i * y y') (y'' : *) (hy' : Path i * y' y'')
	  (f : Path i * x y) (f' : Path i * x' y') (a : Path i (Path j * (hx i) (hy i)) f f')
	  (f'' : Path i * x'' y'') (b : Path i (Path j * (hx' i) (hy' i)) f' f'') :
	  Path i (Path j * ((comp x x' hx x'' hx') i) ((comp y y' hy y'' hy') i)) f f''

#horizontal composition of 2-cells
coh hcomp (x : *) (x' : *) (hx : Path i * x x')
    	  (y : *) (y' : *) (hy : Path i * y y')
	  (f : Path i * x y) (f' : Path i * x' y') (a : Path i (Path j * (hx i) (hy i)) f f')
	  (z : *) (z': * ) (hz : Path i * z z')
	  (g : Path i * y z) (g' : Path i * y' z') (b : Path i (Path j * (hy i) (hz i)) g g') :
	  Path i (Path j * (hx i) (hz i)) (comp x y f z g) (comp x' y' f' z' g')

#horizontal and vertical composition of 2-cells
# ____ ____
#|    |    |
#| a  | b  |
#|____|____|
#|    |    |
#| a' | b' |
#|____|____|
coh hvcomp (x : *) (x' : *) (hx : Path i * x x') (x'' : *) (hx' : Path i * x' x'')
    	 (y : *) (y' : *) (hy : Path i * y y') (y'' : *) (hy' : Path i * y' y'')
	 (f : Path i * x y) (f' : Path i * x' y') (a : Path i (Path j * (hx i) (hy i)) f f')
	 (f'' : Path i * x'' y'') (a' : Path i (Path j * (hx' i) (hy' i)) f' f'')
	 (z : *) (z' : *) (hz : Path i * z z') (z'' : *) (hz' : Path i * z' z'')
	 (g : Path i * y z) (g' : Path i * y' z') (b : Path i (Path j * (hy i) (hz i)) g g')
	 (g'' : Path i * y'' z'') (b' : Path i (Path j * (hy' i) (hz' i)) g' g'') :
	 Path i
	      (Path j * ((comp x x' hx x'' hx') i) ((comp z z' hz z'' hz') i))
	      (comp x y f z g)
	      (comp x'' y'' f'' z'' g'')

# "square identity" for 1-cells
#      __f__
#     |     |
#    f|     |g
#     |_____|
#        g

coh id-sym (x : *) (y : *) (f : Path i * x y) (z : *) (g : Path i * y z) :
    Path i (Path j * (f i) (g i)) f g

# "square associativity" for 1-cells
#     __fg__
#    |      |
#   f|      |h
#    |______|
#       gh

coh assoc (x : *) (y : *) (f : Path i * x y) (z : *) (g : Path i * y z) (w : *) (h : Path i * z w):
    Path i (Path j * (f i) (h i)) (comp x y f z g) (comp y z g w h)


# symetric square associativity
#     __f__
#    |     |
#  fg|     |gh
#    |_____|
#       h

coh assoc-sym
    (x : *) (y : *) (f : Path i * x y) (z : *) (g : Path i * y z) (w : *) (h : Path i * z w):
    Path i (Path j * ((comp x y f z g) i) ((comp y z g w h) i)) f h


# cancellation witness for associativity and its symetric
#    _____________________
#   |          |          |
#   |          |          |
#   | connex2  |  assoc   |
#   |          |          |
#   |__________|__________| ====== > id
#   |          |          |
#   |          |          |
#   |assoc-sym | connex1  |
#   |          |          |
#   |__________|__________|
#
coh assoc-can
    (x : *) (y : *) (f : Path i * x y) (z : *) (g : Path i * y z) (w : *) (h : Path i * z w) :
    Path i
    	 (Path j
	       (Path k *
	       (((unit-l x z (comp x y f z g)) i) j) (((unit-r z w h) i) j))
    	 ((unit-l x z (comp x y f z g)) i) ((unit-r z w h) i))
    (hvcomp x x (id x) z (comp x y f z g)
    	    x y f w (comp y z g w h)
	     (id x) f (connexion2 x y f) h (assoc-sym x y f z g w h)
	    z w h w (id w)
	     (comp x y f z g) (comp y z g w h) (assoc x y f z g w h)
	     (id w) (connexion1 y w (comp y z g w h)))
    (id-sym x z (comp x y f z g) w h)



# another coherence for associativity
#     __(fg)h__
#    |         |
#    |         |
#  id|         |id
#    |         |
#    |_________|
#       f(gh)
#
coh assoc-bis (x : *) (y : *) (f : Path i * x y) (z : *) (g : Path i * y z) (w : *) (h : Path i * z w) :
    Path i (Path j * ((id x) i) ((id w) i))
    (comp x z (comp x y f z g) w h)
    (comp x y f w (comp y z g w h))


#ternary composition of morphisms
coh comp3 (x : *) (y : *) (f : Path i * x y) (z : *) (g : Path i * y z) (w : *) (h : Path i * z w) :
    Path i * x w

coh unit-l3 (x : *) (y : *) (f : Path i * x y) (z : *) (g : Path i * y z) :
    Path i (Path j * ((id x) i) ((id z) i)) (comp3 x x (id x) y f z g) (comp x y f z g)

coh unit-r3 (x : *) (y : *) (f : Path i * x y) (z : *) (g : Path i * y z) :
    Path i (Path j * ((id x) i) ((id z) i)) (comp3 x y f z g z (id z)) (comp x y f z g)

#ternary horizontal composition of 2-cells
coh hcomp3 (x : *) (x' : *) (hx : Path i * x x')
    	   (y : *) (y' : *) (hy : Path i * y y')
	   (f : Path i * x y) (f' : Path i * x' y') (a : Path i (Path j * (hx i) (hy i)) f f')
	   (z : *) (z': * ) (hz : Path i * z z')
	   (g : Path i * y z) (g' : Path i * y' z') (b : Path i (Path j * (hy i) (hz i)) g g')
	   (w : *) (w' : *) (hw : Path i * w w')
	   (k : Path i * z w) (k' : Path i * z' w') (c : Path i (Path j * (hz i) (hw i)) k k') :
	  Path i (Path j * (hx i) (hw i)) (comp3 x y f z g w k) (comp3 x' y' f' z' g' w' k')


# equivalence with the square associativity
#    ________________________________
#   |          |          |          |
#   |          |          |          |
#   | connex2  |  assoc   | connex1  | ------> assoc-bis
#   |          |          |          |
#   |__________|__________|__________|
#
coh equiv-assoc (x : *) (y : *) (f : Path i * x y) (z : *) (g : Path i * y z) (w : *) (h : Path i * z w) :
    Path i
      	 (Path j
      	       (Path k * (((id2 x x (id x)) i) j) (((id2 w w (id w)) i) j))
      	 ((unit-l3 x z (comp x y f z g) w h) i) ((unit-r3 x y f w (comp y z g w h)) i))
    (hcomp3 x x (id x) x y f (id x) f (connexion2 x y f) z w h (comp x y f z g) (comp y z g w h) (assoc x y f z g w h) w w (id w) h (id w) (connexion1 z w h))
    (assoc-bis x y f z g w h)



# exchange law
#    _____________________                      ___________ __________
#   |          |          |                    |          ||          |
#   |          |          |                    |          ||          |
#   |    a     |    b     |                    |    a     ||     b    |
#   |          |          |                    |          ||          |
#   |__________|__________|                    |__________||__________|
#    _____________________     ------->        |          ||          |
#   |          |          |                    |          ||          |
#   |          |          |                    |    c     ||     d    |
#   |    c     |    d     |                    |          ||          |
#   |          |          |                    |__________||__________|
#   |__________|__________|
#
coh exch (x : *) (x' : *) (hx : Path i * x x') (x'' : *) (hx' : Path i * x' x'')
    	 (y : *) (y' : *) (hy : Path i * y y') (y'' : *) (hy' : Path i * y' y'')
	 (f : Path i * x y) (f' : Path i * x' y') (a : Path i (Path j * (hx i) (hy i)) f f')
	 (f'' : Path i * x'' y'') (a' : Path i (Path j * (hx' i) (hy' i)) f' f'')
	 (z : *) (z' : *) (hz : Path i * z z') (z'' : *) (hz' : Path i * z' z'')
	 (g : Path i * y z) (g' : Path i * y' z') (b : Path i (Path j * (hy i) (hz i)) g g')
	 (g'' : Path i * y'' z'') (b' : Path i (Path j * (hy' i) (hz' i)) g' g'') :
	 Path i
	   (Path j
	     (Path k * (((id2 x x'' (comp x x' hx x'' hx')) i) j)
	     	       (((id2 z z'' (comp z z' hz z'' hz')) i) j))
	    ((id2 x z (comp x y f z g)) i)
	    ((id2 x'' z'' (comp x'' y'' f'' z'' g'')) i) )
	 (vcomp x x' hx x'' hx' z z' hz z'' hz' (comp x y f z g) (comp x' y' f' z' g')
	 	(hcomp x x' hx y y' hy f f' a z z' hz g g' b) (comp x'' y'' f'' z'' g'')
	        (hcomp x' x'' hx' y' y'' hy' f' f'' a' z' z'' hz' g' g'' b'))
	 (hcomp	x x'' (comp x x' hx x'' hx')
	 	y y'' (comp y y' hy y'' hy')
		f f'' (vcomp x x' hx x'' hx' y y' hy y'' hy' f f' a f'' a')
		z z'' (comp z z' hz z'' hz')
		g g'' (vcomp y y' hy y'' hy' z z' hz z'' hz' g g' b g'' b'))

coh cube (x : *) (z : *) (k : Path i * x z)
    	 (x' : *) (z' : *) (k' : Path i * x' z')
	 (hx : Path i * x x') (hz : Path i * z z') (a : Path i (Path j * (k i) (k' i)) hx hz)
	 (y : *) (t : *) (l : Path i * y t)
	 (y' : * ) (t' : *) (l' : Path i * y' t')
	 (hy : Path i * y y') (ht : Path i * t t') (b : Path i (Path j * (l i) (l' i)) hy ht)
	 (f : Path i * x y) (g : Path i * z t) (c : Path i (Path j * (k i) (l i)) f g)
	 (f' : Path i * x' y') (g' : Path i * z' t') (d : Path i  (Path j * (k' i) (l' i)) f' g')
	 (e : Path i (Path j * (hx i) (hy i)) f f') (h : Path i  (Path j * (hz i) (ht i)) g g')
	 (A : Path i  (Path j  (Path k * ((a i) j) ((b i) j)) (c i) (d i)) e h) :
	 Path i  (Path j  (Path k * ((a i) j) ((b i) j)) (c i) (d i)) e h


### Non-strict cube
# test (x : *) (y : *) (h : Path i * x y) (z : *) (f : Path i * x z) (g : Path i * y z ) (a : Path i (Path j * (h i) z) f g)

### Ill-defined cube
# test (x : *) (f : Path i * x x) (y : * )(g : Path i * y y) (a : Path i (Path j * (f i) (g i)) f g)